server {
    listen       80 default_server;
    listen       [::]:80 default_server;

    # Использовали «пустое» имя, чтобы не смотреть на заголовок Host.
    server_name  _;

    # Указание корневой папки, в которой нужно смотреть статический контент.
    root /public;

    # Любой запрос приходит в location /, начинается проверка,
    # есть ли по пути /data в файловой системе нужный файл.
    # Если его нет, вызывается сайт по адресу http://app:8000;

    # Такое поведение позволяет сначала проверять статический
    # контент и только потом — сторону сайта.

    # Именновыный location для перенаправления в него запросов.
    location @backend {
        # По какому адресу отправлять запросы по location.
        # Обратное проксирование. Внутри можно передать
        # либо unix-сокет, либо http.
        proxy_pass http://app:8000;
    }

    # Точное совпадение URI: если нашли точное
    # совпадение, то поиск дальше не идёт

    # ~ - совпадение с регулярным выражением с учетом регистра
    # ~* - совпадение с регулярным выражением без учета регистра
    # ^~ - если этот блок будет выбран как лучшее соответствие без регулярных выражений,
    #      сопоставление по регулярным выражением проводиться не будет.
    location ~ ^/(admin|api)/ {
        # Проверяет наличие файла по пути, указанному в запросе.
        # Если такого нет, то перенаправляет на @backend
        try_files $uri $uri/ @backend;
    }

    error_page   404              /404.html;
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}